(define-public (vote-for-proposal (proposal-id uint) (choice bool))
  (let ((voter (get-caller))
        (proposal (get-proposal proposal-id))
        (votes (get-votes proposal-id))
        (has-voted (get-has-voted voter proposal-id)))
    (if (is-equal has-voted true)
      (err "You have already voted on this proposal")
      (begin
        (if (is-equal proposal.status "open")
          (begin
            (put-votes proposal-id (map-set votes voter choice))
            (put-has-voted voter proposal-id true)
            (ok true)
          )
          (err "This proposal is not open for voting")
        )
      )
    )
  )
)

(define-public (get-votes-for-proposal (proposal-id uint))
  (let ((votes (get-votes proposal-id)))
    (ok (map-get votes true))
  )
)

(define-public (get-votes-against-proposal (proposal-id uint))
  (let ((votes (get-votes proposal-id)))
    (ok (map-get votes false))
  )
)

(define-private (get-proposal (proposal-id uint))
  (let ((proposals (get-proposals))
        (proposal (map-get proposals proposal-id)))
    (if (is-none proposal)
      (err "Proposal not found")
      (ok proposal)
    )
  )
)

(define-private (get-proposals)
  (var proposals (map))
  (let ((storage (get-storage))
        (proposals-key (concat "proposals" (uint-to-string proposal-id))))
    (if (is-none (map-get storage proposals-key))
      (ok proposals)
      (ok (map-from-buffer (map-get storage proposals-key)))
    )
  )
)

(define-private (get-votes (proposal-id uint))
  (var votes (map))
  (let ((storage (get-storage))
        (votes-key (concat "votes" (uint-to-string proposal-id))))
    (if (is-none (map-get storage votes-key))
      (ok votes)
      (ok (map-from-buffer (map-get storage votes-key)))
    )
  )
)

(define-private (get-has-voted (voter principal) (proposal-id uint))
  (let ((storage (get-storage))
        (has-voted-key (concat "has-voted" (principal-to-string voter) (uint-to-string proposal-id))))
    (if (is-none (map-get storage has-voted-key))
      (ok false)
      (ok (map-get storage has-voted-key))
    )
  )
)

(define-private (put-votes (proposal-id uint) (votes map))
  (let ((storage (get-storage))
        (votes-key (concat "votes" (uint-to-string proposal-id))))
    (put-storage votes-key (map-to-buffer votes))
    (ok true)
  )
)

(define-private (put-has-voted (voter principal) (proposal-id uint) (has-voted bool))
  (let ((storage (get-storage))
        (has-voted-key (concat "has-voted" (principal-to-string voter) (uint-to-string proposal-id))))
    (put-storage has-voted-key has-voted)
    (ok true)
  )
)
